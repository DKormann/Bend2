 // Translated from Bend
data nat { #S{n} #Z}
data list { #Nil #Cons{h t}}
data pair { #P{a b}}
data bool { #B0 #B1}

 // λA. λN. Σctr:&{&Nil,&Cons}. ~ ctr { &Nil: Σe:Nat{N==0n}. Unit ; &Cons: Σn:Nat. Σh:A. Σt:Vec(A,n). Σe:Nat{N==1n+n}. Unit ; λ_. () }
@Vec = λ&A λ&N *

 // λA. λn. λx. ~ x { (,):λ_x3. λ_x4. ~ _x3 { &Nil: ~ _x4 { (,):λe. λ_x6. ~ _x6 { (): 1n+0n } } ; &Cons: ~ _x4 { (,):λn. λ_x7. ~ _x7 { (,):λh. λ_x9. ~ _x9 { (,):λt. λ_x11. ~ _x11 { (,):λe. λ_x13. ~ _x13 { (): 1n+1n+0n } } } } } ; λ_x6. () } }
@VecInd = λ&A λ&n λ&x (~x {#P:λ&_x3 λ&_x4 (~@str_equal(_x3 "Nil") {0:(~@str_equal(_x3 "Cons") {0:λ&_x6 1 _:(~_x4 {#P:λ&n λ&_x7 (~_x7 {#P:λ&h λ&_x9 (~_x9 {#P:λ&t λ&_x11 (~_x11 {#P:λ&e λ&_x13 #S{#S{#Z{}}}})})})})}) _:(~_x4 {#P:λ&e λ&_x6 #S{#Z{}}})})})

 // 1n+1n+0n
@main = #S{#S{#Z{}}}
