 // Translated from Bend
data nat { #S{n} #Z}
data list { #Nil #Cons{h t}}
data pair { #P{a b}}

 // λA. A -> Empty
@Not = λ&A *

 // λA. λN. Σctr:&{&Nil,&Cons}. ~ ctr { &Nil: Σe:Nat{N==0n}. Unit ; &Cons: Σn:Nat. Σh:A. Σt:Vec(A,n). Σe:Nat{N==1n+n}. Unit ; λ_. () }
@Vec = λ&A λ&N *

 // λA. λP. λN. λC. λn. λx. ~ x { (,):λ_x6. λ_x7. ~ _x6 { &Nil: ~ _x7 { (,):λe. λ_x9. ~ _x9 { (): ~ e { {==}:N } } } ; &Cons: ~ _x7 { (,):λn. λ_x10. ~ _x10 { (,):λh. λ_x12. ~ _x12 { (,):λt. λ_x14. ~ _x14 { (,):λe. λ_x16. ~ _x16 { (): ~ e { {==}:C(n,h,t,VecInd(A,P,N,C,n,t)) } } } } } } ; λ_x9. () } }
@VecInd = λ&A λ&P λ&N λ&C λ&n λ&x (~x {#P:λ&_x6 λ&_x7 (~@str_equal(_x6 "Nil") {0:(~@str_equal(_x6 "Cons") {0:λ&_x9 1 _:(~_x7 {#P:λ&n λ&_x10 (~_x10 {#P:λ&h λ&_x12 (~_x12 {#P:λ&t λ&_x14 (~_x14 {#P:λ&e λ&_x16 ((((C n) h) t) ((((((@VecInd A) P) N) C) n) t))})})})})}) _:(~_x7 {#P:λ&e λ&_x9 N})})})

 // λA. λB. Σctr:&{&Sup}. ~ ctr { &Sup: Σx:A. Σf:B(x) -> W(A,B). Unit ; λ_. () }
@W = λ&A λ&B *

 // λn. @Sup{@WLeaf{n},λe. ~e{}}
@WLeaf = λ&n #P{"Sup" #P{#P{"WLeaf" #P{n 1}} #P{λ&e * 1}}}

 // λl. λr. @Sup{@WNode{},λi. ~ i { &lft: l ; &rgt: r ; λ_. () }}
@WNode = λ&l λ&r #P{"Sup" #P{#P{"WNode" 1} #P{λ&i (~@str_equal(i "lft") {0:(~@str_equal(i "rgt") {0:λ&_ 1 _:r}) _:l}) 1}}}

 // W(WTreeTag(Nat),WTreeRec)
@WTree = ((@W (@WTreeTag *)) @WTreeRec)

 // λtag. ~ tag { (,):λ_x1. λ_x2. ~ _x1 { &WLeaf: ~ _x2 { (,):λvalue. λ_x4. ~ _x4 { (): Empty } } ; &WNode: ~ _x2 { (): &{&lft,&rgt} } ; λ_x4. () } }
@WTreeRec = λ&tag (~tag {#P:λ&_x1 λ&_x2 (~@str_equal(_x1 "WLeaf") {0:(~@str_equal(_x1 "WNode") {0:λ&_x4 1 _:*}) _:(~_x2 {#P:λ&value λ&_x4 *})})})

 // λA. Σctr:&{&WLeaf,&WNode}. ~ ctr { &WLeaf: Σvalue:A. Unit ; &WNode: Unit ; λ_. () }
@WTreeTag = λ&A *

 // λa. λb. ~ a { 0n: b ; 1n+: λp. 1n+add(p,b) }
@add = λ&a λ&b (~a {#Z:b #S:λ&p #S{((@add p) b)}})

 // λA. λB. λa. λb. λf. λe. ~ e { {==}:{==} }
@app = λ&A λ&B λ&a λ&b λ&f λ&e 0

 // λa. λb. λc. ~ a { 0n: {==} ; 1n+: λap. 1n+assoc(ap,b,c) }
@assoc = λ&a λ&b λ&c (~a {#Z:0 #S:λ&ap #S{(((@assoc ap) b) c)}})

 // λa. λb. ~ a { 0n: zero_right(b) ; 1n+: λap. ~ comm(ap,b) { {==}:~ succ_right(b,ap) { {==}:{==} } } }
@comm = λ&a λ&b (~a {#Z:(@zero_right b) #S:λ&ap 0})

 // λn. ~ n { 0n: 0n ; 1n+: λ_x2. ~ _x2 { 0n: 0n ; 1n+: λp. 1n+div2(p) } }
@div2 = λ&n (~n {#Z:#Z{} #S:λ&_x2 (~_x2 {#Z:#Z{} #S:λ&p #S{(@div2 p)}})})

 // λn. ~ n { 0n: {==} ; 1n+: λp. !div2_mul2_theo(p);λind. !app(Nat,Nat,div2(mul2(p)),p,λx. 1n+x,ind);λprf. prf }
@div2_mul2_theo = λ&n (~n {#Z:0 #S:λ&p (λ&ind (λ&prf prf ((((((@app *) *) (@div2 (@mul2 p))) p) λ&x #S{x}) ind)) (@div2_mul2_theo p))})

 // λn. ~ n { 0n: {==} ; 1n+: λp. 1n+div2_mul2_theo_2(p) }
@div2_mul2_theo_2 = λ&n (~n {#Z:0 #S:λ&p #S{(@div2_mul2_theo_2 p)}})

 // λx. ~ x { False: {==} ; True: {==} }
@double_neg_theo = λ&x (~x {#B0:0 #B1:0})

 // λa. λb. ~ a { 0n: ~ b { 0n: True ; 1n+: λb. False } ; 1n+: λa. ~ b { 0n: False ; 1n+: λb. eql(a,b) } }
@eql = λ&a λ&b (~a {#Z:(~b {#Z:#B1{} #S:λ&b #B0{}}) #S:λ&a (~b {#Z:#B0{} #S:λ&b ((@eql a) b)})})

 // λA. λx. x
@id = λ&A λ&x x

 // λn. ~ n { 0n: True ; 1n+: λ_x2. ~ _x2 { 0n: False ; 1n+: λp. is_even_a(p) } }
@is_even_a = λ&n (~n {#Z:#B1{} #S:λ&_x2 (~_x2 {#Z:#B0{} #S:λ&p (@is_even_a p)})})

 // λn. ~ n { 0n: {==} ; 1n+: λ_x2. ~ _x2 { 0n: {==} ; 1n+: λp. ~ double_neg_theo(is_even_b(p)) { {==}:is_even_ab_theo(p) } } }
@is_even_ab_theo = λ&n (~n {#Z:0 #S:λ&_x2 (~_x2 {#Z:0 #S:λ&p (@is_even_ab_theo p)})})

 // λn. ~ n { 0n: True ; 1n+: λp. neg(is_even_b(p)) }
@is_even_b = λ&n (~n {#Z:#B1{} #S:λ&p (@neg (@is_even_b p))})

 // λA. λB. λf. λxs. ~ xs { []:[] ; <>:λx. λxs. f(x)<>map(A,B,f,xs) }
@map = λ&A λ&B λ&f λ&xs (~xs {#Nil:[] #Cons:λ&x λ&xs #Cons{(f x) ((((@map A) B) f) xs)}})

 // λa. λb. ~ a { 0n: 0n ; 1n+: λap. add(b,mul(ap,b)) }
@mul = λ&a λ&b (~a {#Z:#Z{} #S:λ&ap ((@add b) ((@mul ap) b))})

 // λn. ~ n { 0n: 0n ; 1n+: λp. 1n+1n+mul2(p) }
@mul2 = λ&n (~n {#Z:#Z{} #S:λ&p #S{#S{(@mul2 p)}}})

 // λn. λm. λk. ~ n { 0n: {==} ; 1n+: λp. ~ mul_dist_left(p,m,k) { {==}:~ assoc(m,k,add(mul(p,m),mul(p,k))) { {==}:~ comm(k,add(mul(p,m),mul(p,k))) { {==}:~ assoc(mul(p,m),mul(p,k),k) { {==}:~ comm(mul(p,k),k) { {==}:~ assoc(m,mul(p,m),add(k,mul(p,k))) { {==}:{==} } } } } } } }
@mul_dist_left = λ&n λ&m λ&k (~n {#Z:0 #S:λ&p 0})

 // λb. {==}
@mul_zero_left = λ&b 0

 // λn. ~ n { 0n: {==} ; 1n+: λp. ~ mul_zero_right(p) { {==}:{==} } }
@mul_zero_right = λ&n (~n {#Z:0 #S:λ&p 0})

 // λx. ~ x { False: True ; True: False }
@neg = λ&x (~x {#B0:#B1{} #B1:#B0{}})

 // λn. ~ n { 0n: 0n ; 1n+: λp. p }
@pred = λ&n (~n {#Z:#Z{} #S:λ&p p})

 // λn. λm. λe. ~ n { 0n: ~ m { 0n: {==} ; 1n+: λm. ~e{} } ; 1n+: λn. ~ m { 0n: ~e{} ; 1n+: λm. app(Nat,Nat,1n+1n+n,1n+1n+m,pred,e) } }
@succ_inj = λ&n λ&m λ&e (~n {#Z:(~m {#Z:0 #S:λ&m *}) #S:λ&n (~m {#Z:* #S:λ&m ((((((@app *) *) #S{#S{n}}) #S{#S{m}}) @pred) e)})})

 // λa. λb. {==}
@succ_left_mul = λ&a λ&b 0

 // λn. λe. ~e{}
@succ_neq_zero = λ&n λ&e *

 // λa. λb. ~ a { 0n: {==} ; 1n+: λap. 1n+succ_right(ap,b) }
@succ_right = λ&a λ&b (~a {#Z:0 #S:λ&ap #S{((@succ_right ap) b)}})

 // λw. ~ w { (,):λ_x1. λ_x2. ~ _x1 { &Sup: ~ _x2 { (,):λx. λ_x4. ~ _x4 { (,):λf. λ_x6. ~ _x6 { (): ~ x { (,):λ_x7. λ_x8. ~ _x7 { &WLeaf: ~ _x8 { (,):λvalue. λ_x10. ~ _x10 { (): value } } ; &WNode: ~ _x8 { (): !f(&lft);λa. !f(&rgt);λb. add(sum_wtree(a),sum_wtree(b)) } ; λ_x10. () } } } } } ; λ_x3. () } }
@sum_wtree = λ&w (~w {#P:λ&_x1 λ&_x2 (~@str_equal(_x1 "Sup") {0:λ&_x3 1 _:(~_x2 {#P:λ&x λ&_x4 (~_x4 {#P:λ&f λ&_x6 (~x {#P:λ&_x7 λ&_x8 (~@str_equal(_x7 "WLeaf") {0:(~@str_equal(_x7 "WNode") {0:λ&_x10 1 _:(λ&a (λ&b ((@add (@sum_wtree a)) (@sum_wtree b)) (f "rgt")) (f "lft"))}) _:(~_x8 {#P:λ&value λ&_x10 value})})})})})})})

 // λw. wfold(WTreeTag(Nat),WTreeRec,Nat,w,λtag. λf. ~ tag { (,):λ_x3. λ_x4. ~ _x3 { &WLeaf: ~ _x4 { (,):λvalue. λ_x6. ~ _x6 { (): value } } ; &WNode: ~ _x4 { (): add(f(&lft),f(&rgt)) } ; λ_x6. () } })
@sum_wtree_fold = λ&w (((((@wfold (@WTreeTag *)) @WTreeRec) *) w) λ&tag λ&f (~tag {#P:λ&_x3 λ&_x4 (~@str_equal(_x3 "WLeaf") {0:(~@str_equal(_x3 "WNode") {0:λ&_x6 1 _:((@add (f "lft")) (f "rgt"))}) _:(~_x4 {#P:λ&value λ&_x6 value})})}))

 // λA. λB. λP. λw. λF. ~ w { (,):λ_x5. λ_x6. ~ _x5 { &Sup: ~ _x6 { (,):λx. λ_x8. ~ _x8 { (,):λf. λ_x10. ~ _x10 { (): F(x,λy. wfold(A,B,P,f(y),F)) } } } ; λ_x7. () } }
@wfold = λ&A λ&B λ&P λ&w λ&F (~w {#P:λ&_x5 λ&_x6 (~@str_equal(_x5 "Sup") {0:λ&_x7 1 _:(~_x6 {#P:λ&x λ&_x8 (~_x8 {#P:λ&f λ&_x10 ((F x) λ&y (((((@wfold A) B) P) (f y)) F))})})})})

 // λb. {==}
@zero_left = λ&b 0

 // λa. ~ a { 0n: {==} ; 1n+: λap. 1n+zero_right(ap) }
@zero_right = λ&a (~a {#Z:0 #S:λ&ap #S{(@zero_right ap)}})

