 // Translated from Bend
data nat { #S{n} #Z}
data list { #Nil #Cons{h t}}

 // λA. A -> Empty
@Not = λ&A *

 // λa. λb. a
@add = λ&a λ&b &a

 // Σctr:&{&Right,&Left}. ~ ctr { &Right: Σa:Nat. Unit ; &Left: Unit ; λ_. () }
@either = *

 // λA. λx. x
@id = λ&A λ&x &x

 // λx. λx. x
@incept = λ&x λ&x &x

 // 1n+0n<>[]
@kk = [#S{#Z{}}]

 // Σctr:&{&Nil,&Cons}. ~ ctr { &Nil: Unit ; &Cons: Σh:Nat. Σt:list. Unit ; λ_. () }
@list = *

 // λx. 1n+({==}::Nat{0n==0n})
@main = λ&x #S{0}

 // λn. ~ n { 0n: 0n ; 1n+: λp. 1n+1n+p }
@mul2 = λ&n (~&n {#Z:#Z{} #S:λ&p #S{#S{&p}}})

 // @Right{1n+0n}
@right = #P{"Right" #P{#S{#Z{}} 1}}

 // λn. 1n+n
@succ = λ&n #S{&n}

 // λa. ~ a { 0n: {==} ; 1n+: λap. 1n+zero_right(ap) }
@zero_right = λ&a (~&a {#Z:0 #S:λ&ap #S{(@zero_right &ap)}})

